{"version":3,"sources":["js/dashboardGenerator.js","js/App.js","serviceWorker.js","index.js"],"names":["options","mentorStudentData","forEach","elem","i","mentorGitHub","mentor","value","slice","label","push","dashBoard","state","mentees","selectedOption","tasks","handleChange","_this","setState","generateMentorStudents","generateTasks","menteeArray","find","element","this","tasksArray","taskName","task","name","defaultStatus","taskDefaultStatus","_this2","mentee","cell","document","getElementById","concat","menteeId","innerHTML","className","_this3","react_default","a","createElement","react","react_select_esm","onChange","map","key","href","id","taskLink","tasksToCheck","marksForTasks","paintCells","Component","App","dashboardGenerator","Boolean","window","location","hostname","match","ReactDOM","render","js_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2412a738.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport mentorStudentData from '../data.json';\r\nimport Select from 'react-select';\r\n\r\nconst options = [];\r\n\r\nfunction generateMentorsList() {\r\n\tmentorStudentData.forEach((elem, i) => {\r\n\t\t\tif (elem.mentorGitHub) {\r\n\t\t\t\tconst mentor = {};\r\n\t\t\t\tmentor.value = elem.mentorGitHub.slice(19);\r\n\t\t\t\tmentor.label = elem.mentorGitHub.slice(19);\r\n\t\t\t\toptions.push(mentor);\r\n\t\t\t}\r\n\t});\r\n}\r\n\r\ngenerateMentorsList();\r\n\r\nclass dashBoard extends Component {\r\n\tstate = {\r\n\t\tmentees: [],\r\n\t\tselectedOption: null,\r\n\t\ttasks: [],\r\n\t}\r\n\r\n\thandleChange = (selectedOption) => {\r\n\t\tthis.setState({ selectedOption });\r\n\t\toptions.forEach((elem, i) => {\r\n\t\t\tif (elem.value === selectedOption.value){\r\n\t\t\t\tthis.generateMentorStudents(selectedOption.value);\r\n\t\t\t\tthis.generateTasks();\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t})\r\n  }\r\n\t\r\n\tgenerateMentorStudents(mentor) {\r\n\t\tconst menteeArray = mentorStudentData.find(function(element) {\r\n    return element.mentorGitHub === 'https://github.com/' + mentor;\r\n\t\t});\r\n\t\tthis.setState({\r\n\t\t\tmentees: menteeArray.mentees,\r\n\t\t});\r\n\t}\r\n\r\n\tgenerateTasks() {\r\n\t\tconst tasksArray = [];\r\n\t\tmentorStudentData.forEach(function(element) {\r\n\t\t\tif (element.taskName) {\r\n\t\t\t\tconst task = {};\r\n\t\t\t\ttask.name = element.taskName;\r\n\t\t\t\ttask.defaultStatus = element.taskDefaultStatus;\r\n\t\t\t\ttasksArray.push(task);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tthis.setState({\r\n\t\t\ttasks: tasksArray,\r\n\t\t});\r\n\t}\r\n\r\n\tpaintCells() {\r\n\t\tconst { tasks } = this.state;\r\n\t\t\ttasks.forEach((task) => {\r\n\t\t\t\tthis.state.mentees.forEach((mentee) => {\r\n\t\t\t\t\tlet cell = document.getElementById(`${task.name}_${mentee.menteeId}`)\r\n\t\t\t\t\tif (cell.innerHTML !== '') cell.className = 'checked';\r\n\t\t\t\t\tif (cell.innerHTML === '' && task.defaultStatus === 'Checked') cell.className = 'expired';\r\n\t\t\t\t\tif (cell.innerHTML < 1 && task.defaultStatus === 'Checked') cell.className = 'expired';\r\n\t\t\t\t\tcell.innerHTML = '';\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t}\r\n\r\n  render() {\r\n    return (\r\n\t\t\t\t<Fragment>\r\n\t\t\t\t\t<div className='search__wrapper'>\r\n\t\t\t\t\t<div>Selected Mentor:</div>\r\n\t\t\t\t\t<Select\r\n\t\t\t\t\t\tclassName='search'\r\n\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\toptions={options}\r\n\t\t\t\t\t\tvalue={this.state.selectedOption}\r\n          />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<table className='marksTable'>\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<td>Scheduled Task</td>\r\n\t\t\t\t\t\t\t{this.state.mentees.map((elem, i) => {\r\n           \t\treturn <td className='mentee' key={`mentee${i}`}><a href={'https://github.com/'+elem.menteeId}>{elem.menteeId}</a></td>\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t{mentorStudentData.map((elem, i) => { \r\n\t\t\t\t\t\tlet className = '';\r\n            if (elem.taskName) {\r\n\t\t\t\t\t\t\tif (elem.taskDefaultStatus === 'Checked') {\r\n\t\t\t\t\t\t\t\tclassName = 'checked';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (elem.taskDefaultStatus === 'ToDo') {\r\n\t\t\t\t\t\t\t\tclassName = 'todo';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (elem.taskDefaultStatus === 'Checking') {\r\n\t\t\t\t\t\t\t\tclassName = 'toCheck';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (elem.taskDefaultStatus === 'In Progress') {\r\n\t\t\t\t\t\t\t\tclassName = 'inProgress';\r\n\t\t\t\t\t\t\t}\r\n              return (\r\n\t\t\t\t\t\t\t\t<tr key={`${elem.taskName}`} id={`tableRow_${i}`}>\r\n                    <td className='taskName'><a href={elem.taskLink}>{elem.taskName}</a></td>\r\n\t\t\t\t\t\t\t\t\t\t{ this.state.mentees.map((mentee, i) => {\r\n\t\t\t\t\t\t\t\t\t\treturn <td className={`taskMark ${className}`} key={`${elem.taskName}_${mentee.menteeId}`} id={`${elem.taskName}_${mentee.menteeId}`}>\r\n\t\t\t\t\t\t\t\t\t\t\t{mentee.tasksToCheck.map((task,i) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (task === elem.taskName) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn mentee.marksForTasks[i];\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t})}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t</tr>\r\n              )\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})}\r\n\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t</table>\t\t\t\r\n\t\t\t\t</Fragment>\r\n    )\r\n\t}\r\n\t\r\n\tcomponentDidUpdate() {\r\n\t\tthis.paintCells();\r\n\t}\r\n}\r\n\r\nexport default dashBoard;\r\n","import React, { Component, Fragment } from 'react';\nimport Dashboard from './dashboardGenerator';\nimport '../styles.css';\n\nclass App extends Component {\n  state = {\n    selectedOption: null,\n  }\n\n  render() {\n      return (\n        <Fragment>\n          <div className='main'>\n          <Dashboard />\n          </div>\n        </Fragment>\n      )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './js/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}